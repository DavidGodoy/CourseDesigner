/**
 *
 * Template Transformation Example
 *
 */
texttransformation ActividadesTransformation (in mindmap:"http://mindmap.org/model") {
var nodoUBEnlacesLlegadaMap:Hashtable;
  var outputFilenameEnvVar:String = "transformationOutputFilename";
  var referenceFilenameEnvVar:String = "referenceFilename";
  /**
   * Main (entry point)
   */
  mindmap.Curso.ActividadDiagrama::main () {
    //file('salida.html');
     file(getenv(outputFilenameEnvVar));
     var conceptsFile:String = getenv(referenceFilenameEnvVar);
     
    cabeceraHTML();
    
    var inicial:mindmap.ActividadNodoInicial=self.elementoNodoInicial;
    
    var enlaces:List=self.enlacesActividad;
    var primerEnlace:mindmap.ActividadEnlace;
    
    enlaces->forEach(c:mindmap.ActividadEnlace)
    {
      if(c.origen==inicial)
      {
       	primerEnlace=c; 
        
      }
    }
    
    
    primerEnlace.procesarNodo(enlaces);
    
    
      
    
    finHTML();
  }
  
  mindmap.ActividadEnlace::procesarNodo(listaEnlaces:List)
  {
    
    var nodoActual:mindmap.ActividadNodo=self.destino;
    if(nodoActual.oclIsTypeOf(mindmap.Leccion))
    {
      var nodo:mindmap.Leccion=nodoActual;
      
      tab(1)'<div id="Leccion_'nodo.nombre'" class="caja">\n';
      
      //procesarNombre(nodo.nombre);
      tab(2)'<h2>Lección 'nodo.nombre'</h2>\n';
      
      tab(2)'<ul>\n';
      procesarProfesor(nodo.profesor);
      procesarPorcentajeNota(nodo.porcentajeNota);
      procesarDuracion(nodo.duracion);
      tab(2)'</ul>\n';
      tab(1)'</div>\n';
      //Contenidos

  		nodo.buscarEnlaceSalida(listaEnlaces).procesarNodo(listaEnlaces);
  		
    }else if(nodoActual.oclIsTypeOf(mindmap.Tarea))
    {
      var nodo:mindmap.Tarea=nodoActual;
      
      tab(1)'<div id="Tarea_'nodo.nombre'" class="caja">\n';
      
      //procesarNombre(nodo.nombre);
      tab(2)'<h2>Tarea 'nodo.nombre'</h2>\n';
      
      tab(2)'<ul>\n';
      procesarTipo(nodo.tipo);
      procesarPorcentajeNota(nodo.porcentajeNota);
      procesarDuracion(nodo.duracion);
      tab(2)'</ul>\n';
      tab(1)'</div>\n';
      //Contenidos
   
  	  		nodo.buscarEnlaceSalida(listaEnlaces).procesarNodo(listaEnlaces);
  	
  	
    }else if(nodoActual.oclIsTypeOf(mindmap.Prueba))
    {
      var nodo:mindmap.Prueba=nodoActual;
      
      tab(1)'<div id="Prueba_'nodo.nombre'" class="caja">\n';
      
      //procesarNombre(nodo.nombre);
     tab(2)'<h2>Prueba 'nodo.nombre'</h2>\n';
      tab(2)'<ul>\n';
      procesarTipo(nodo.tipo);
      procesarPorcentajeNota(nodo.porcentajeNota);
      procesarDuracion(nodo.duracion);
 
 	  tab(2)'</ul>\n';
      tab(1)'</div>\n';
   		nodo.buscarEnlaceSalida(listaEnlaces).procesarNodo(listaEnlaces);
 
    }else if(nodoActual.oclIsTypeOf(mindmap.ActividadUnionBifurcacion))
    {
      
      var nodo:mindmap.ActividadUnionBifurcacion = nodoActual;
      //Los enlacesEntrantes registrados/procesados al nodo UB
      var enlacesLlegada:List = nodoUBEnlacesLlegadaMap.get(nodo);
      enlacesLlegada.add(self);
      nodoUBEnlacesLlegadaMap.put(nodo, enlacesLlegada);
      
     
      // Miro cuántos enlaces llegan a este nodo

  var llegan:Integer = 0;
      listaEnlaces->forEach(e:mindmap.ActividadEnlace)
      {
        if(e.destino == nodo)
        {
          llegan = llegan + 1;
        }
      }
      
      
  	// Compruebo si ya han llegado todos
      var hanLlegado:Integer = nodoUBEnlacesLlegadaMap.get(nodo).size();
      
      if (hanLlegado == llegan)
      {
        
        // Si llega más de uno, es una unión
        if (enlacesLlegada.size() > 1)
        {
          
          imprimirReferenciasLlegada(enlacesLlegada);
        }
         // Continúo con los enlaces que salen de esta U/B
        
        // Primero se cogen los enlaces que salen
       
   //   var enlacesSalida:List=listaEnlaces->select(es:mindmap.ActividadEnlace|e.origen=nodo);
      //var salen:Integer = enlacesSalientes.size();
       var enlacesSalida:List;
        // Primero se cogen los enlaces que salen
        listaEnlaces->forEach(e:mindmap.ActividadEnlace)
        {
          
          if(e.origen == nodo)
          {
            enlacesSalida.add(e);
          }
        }
      // Si sale más de uno, es una bifurcación
        if (enlacesSalida.size() > 1)
        {
          
          // Se imprimen las referencias
          imprimirReferenciasSalida(enlacesSalida);
        }
        // Se procesan las ramas que salen
        enlacesSalida->forEach(e:mindmap.ActividadEnlace)
        {
          e.procesarNodo(listaEnlaces);
        }
      }
       else
      {
        // Todavía faltan enlaces por llegar, así que no hago nada
      }
      
        
  
        // Todavía faltan enlaces por llegar, así que no hago nada
  	}else if(nodoActual.oclIsTypeOf(mindmap.ActividadNodoFinal))
  	{
  	  //Se acabó
  	}
  	else{
  	}

  }
  
    /**
   * Función para buscar el enlace de salida de un nodo
   */
  mindmap.ActividadNodo::buscarEnlaceSalida(listaEnlaces:List) : mindmap.ActividadEnlace
  {
   	listaEnlaces->forEach(c:mindmap.ActividadEnlace)
       {
         if(c.origen==self)
       {
          result=c;
         }
       }
  }
  
  
  /**
   * Función para imprimir la referencia a los nodos que salen de una Unión/Bifurcación
   */
  imprimirReferenciasSalida(enlacesSalida:List)
  {
    var listaAImprimir:List;
    
    enlacesSalida->forEach(e:mindmap.ActividadEnlace)
    {
      var nodo : mindmap.ActividadNodo = e.destino;

      listaAImprimir.add(nodo.obtenerReferenciaANodo());
      
    }
    
    if (listaAImprimir.size() > 0)
    {
      
      tab(1)'<p>En este punto comienzan en paralelo las acciones: '
      listaAImprimir->forEach(cadena:String)
      {
        cadena;
        if (!cadena.equals(listaAImprimir.last()))
        {
          ', '
        }
      }
      '</p>\n'
    }
  }
  
  mindmap.ActividadNodo::obtenerReferenciaANodo():String
  {
    
    if (self.oclIsTypeOf(mindmap.Prueba))
    {
      
      var nodoCuestionario:mindmap.Prueba = self;
      result = '<a href="#Prueba_'+nodoCuestionario.nombre+'">'+nodoCuestionario.nombre+'</a>';
    }
    else if (self.oclIsTypeOf(mindmap.Leccion))
    {
      
      var nodoLeccion:mindmap.Leccion = self;
      result = '<a href="#Leccion_'+nodoLeccion.nombre+'">'+nodoLeccion.nombre+'</a>';
    }
    else if (self.oclIsTypeOf(mindmap.Tarea))
    {
      
      var nodoTarea:mindmap.Tarea = self;
      
      result = '<a href="#Tarea_'+nodoTarea.nombre+'">'+nodoTarea.nombre+'</a>';
    }
    else
    {
      // No se hace nada si es otro tipo de nodo
    }
  }
  
  

  
  /**
   * Función para imprimir la referencia a los nodos que llegan a una Unión/Bifurcación
   */
  imprimirReferenciasLlegada(enlacesLlegada:List)
  {
    var listaAImprimir:List;
    
    enlacesLlegada->forEach(e:mindmap.ActividadEnlace)
    {
      var nodo : mindmap.ActividadNodo = e.origen;
      listaAImprimir.add(nodo.obtenerReferenciaANodo());
    }
    
    if (listaAImprimir.size() > 0)
    {
      
      tab(1)'<p>En este punto deben haber terminado las acciones: '
      listaAImprimir->forEach(cadena:String)
      {
        cadena;
        if (!cadena.equals(listaAImprimir.last()))
        {
          ', '
        }
      }
      '</p>\n'
    }
  }
  

  procesarDuracion(duracion:Real){

	if (duracion != null && duracion > 0.0)
    {
      tab(3)'<li>Duración: ' duracion ' minutos.</li>\n';
    }
  }
    procesarPorcentajeNota(nota:Real){

	if (nota != null && nota > 0.0)
    {
      tab(3)'<li>Nota: ' nota ' %</li>\n';
    }
  }
  
   procesarTipo(tipo:String){

	if (tipo != null)
    {
      tab(3)'<li>Tipo: ' tipo '</li>\n';
    }
  }
    procesarProfesor(nombre:String)
  {
    if(nombre!=null){
    tab(3)'<li>Profesor: 'nombre'</li>\n';
    }
  }

  
 cabeceraHTML(){
   '<!doctype html>\n'
	'<html>\n'
	'<head>\n'
	'<meta charset="utf-8">\n'
	'<title>Actividades</title>\n'
	'<link href="style/style.css" rel="stylesheet" type="text/css"/>\n'
	'</head>\n'
	'<body>\n'
	
	tab(1)'<div id="cabecera">\n'
	tab(2)'<h1>Actividades</h1>\n'
	tab(1)'</div>\n'
	
 }
 
 
 
  finHTML(){
    '</body>\n'
  }
}/**
 *
 * Template Transformation Example
 *
 */

 
  /**
   * Función para imprimir la referencia a los nodos que salen de una Unión/Bifurcación
   */
 
}